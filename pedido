const $modal = document.getElementById('modal');
const $descriptionInput = document.getElementById('description');
const $priorityInput = document.getElementById('priority');
const $deadlineInput = document.getElementById('deadline');
const $columnInput = document.getElementById('column');
const $idInput = document.getElementById('idInput');
const $valorInput = document.getElementById('valor'); 
const $observacaoInput = document.getElementById('observacao')


const $creationModeTitle = document.getElementById('creationModeTitle');
const $editingModeTitle = document.getElementById('editingModeTitle');

const $deleteModeBtn = document.getElementById('deleteModeBtn');

const $creationModeBtn = document.getElementById('creationModeBtn');
const $editingModeBtn = document.getElementById('editingModeBtn');

var tasklist = [];
var cardCount = 1;


// Função para abrir o modal em modo de criação
function openModal(data_column) {
  $modal.style.display = "flex";
  $columnInput.value = data_column;
  $valorInput.value = ""; // Limpei o campo "valor"
  $observacaoInput.value = "";

  $creationModeTitle.style.display = "block";
  $creationModeBtn.style.display = "block";

  $editingModeTitle.style.display = "none";
  $editingModeBtn.style.display = "none";

  // Ocultar o botão de exclusão no modo de criação
  $deleteModeBtn.style.display = "none";

}

function deleteTask() {
  // Obtenha o ID da tarefa a ser excluída do campo oculto
  var taskId = $idInput.value;

  // Verifique se o ID não está vazio
  if (taskId !== "") {
    // Use o ID para encontrar o índice da tarefa no array de tarefas
    var taskIndex = tasklist.findIndex(task => task.id == taskId);

    if (taskIndex !== -1) {
      // Remova a tarefa do array de tarefas
      tasklist.splice(taskIndex, 1);

      // Feche o modal após excluir a tarefa
      closeModal();
      
      // Regenere os cards após a exclusão
      generateCards();
    }
  }
}

function deleteCard(taskId) {
  // Use o ID para encontrar o elemento do card correspondente e removê-lo
  var cardToRemove = document.querySelector('.cards_List [data-id="' + taskId + '"]');
  if (cardToRemove) {
    cardToRemove.remove();
  }
}



function openModalToedit(id) {
  $modal.style.display = "flex";

  $creationModeTitle.style.display = "none";
  $creationModeBtn.style.display = "none";

  $editingModeTitle.style.display = "block";
  $editingModeBtn.style.display = "block";

  const task = tasklist.find(task => task.id == id);

  $idInput.value = task.id;
  $descriptionInput.value = task.description;
  $priorityInput.value = task.priority;
  $deadlineInput.value = task.deadline;
  $columnInput.value = task.column;
  $valorInput.value = task.valor;
  $observacaoInput.value = task.observacao;

  // Atualizar o botão "Cadastrar" no modo de edição
  $editingModeBtn.textContent = "Salvar";

  $deleteModeBtn.style.display = "block"; // Mostrar o botão de exclusão
}



// Função para fechar o modal
function closeModal() {
  $modal.style.display = "none";

  $idInput.value = "";
  $descriptionInput.value = "";
  $priorityInput.value = "";
  $deadlineInput.value = "";
  $columnInput.value = "";
  $valorInput.value = "";
  $observacaoInput.value = "";
}

function resetColumn() {
  document.querySelectorAll('.column .body .cards_List').forEach(column => {
    column.innerHTML = '';
  });
}

function generateCards() {
  resetColumn();
  cardNumber =1;

  tasklist.forEach(task => {
    const formattedDate = moment(task.deadline).format('DD/MM/YYYY');
    const columnBody = document.querySelector(`[data-column="${task.column}"] .body .cards_List`);
    const card = `
      <div 
        id="${task.id}"
        class="card" 
        ondblclick="openModalToedit(${task.id})"
        draggable="true"
        ondragstart="dragstart_handler(event)"
      >
       <div class="info-item">
          <b>Pedido</b> 
          <span>${cardNumber}</span>
        </div><br>
        <div class="info-item">  
          <b>Nome/Empresa:</b>
          <span>${task.description}</span>
        </div>
        <div class="info-item">
          <b>Prioridade:</b>
          <span>${task.priority}</span>
        </div>
        
         <div class="info-item-tem">
          <b>Valor R$:</b>
          <span>${task.valor}</span>
          <div class="info-item">
          <b>Vencimento:</b>
          <span>${formattedDate}</span>
        </div>
         <div class="info-item">  
          <b>Observação:</b>
          <span>${task.observacao}</span>
        </div>
        </div>
      </div>
    `;
    columnBody.innerHTML += card;
    cardNumber++;
  });
}



// Evento para fechar o modal após o carregamento da página
window.addEventListener('load', () => {
  closeModal();
});

// Função para validar se o campo "valor" contém apenas números, vírgulas e pontos 
function isValidNumber(value) {
  const regex = /^[0-9,.]+$/;
  return regex.test(value);
}


function createTask() {
  const valor = $valorInput.value;
  const deadline = $deadlineInput.value;
  
  if (!isValidNumber(valor)) {
    alert("O campo 'valor' deve conter apenas números.");
    return;
  }
 
  // Converter a data de "dd/mm/yyyy" para "yyyy-mm-dd"
  const dateParts = deadline.split('/');
  const selectedDate = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);

  // Obtenha a data atual
  const currentDate = new Date();

  // Definir a hora da data atual para o início do dia (00:00:00)
  currentDate.setHours(0, 0, 0, 0);

  if (selectedDate < currentDate) {
    alert("A data de vencimento não pode ser retroativa.");
    return;
  }

 
  const newTask = {
    id: Math.floor(Math.random() * 9999999),
    description: $descriptionInput.value,
    priority: $priorityInput.value,
    deadline: $deadlineInput.value,
    column: $columnInput.value,
    valor: $valorInput.value, // Adicionei o campo "valor"
    observacao: $observacaoInput.value,
  };

  tasklist.push(newTask);

  closeModal();
  generateCards();
}

function updateTask() {
   const valor = $valorInput.value;
   const deadline = $deadlineInput.value;

  if (!isValidNumber(valor)) {
    alert("O campo 'valor' deve conter apenas números.");
    return;
  }

  const dateParts = deadline.split('/');
  const selectedDate = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);

   // Obtenha a data atual
  const currentDate = new Date();

  // Definir a hora da data atual para o início do dia (00:00:00)
  currentDate.setHours(0, 0, 0, 0);

  if (selectedDate < currentDate) {
    alert("A data de vencimento não pode ser retroativa.");
    return;
  }


  const updatedTask = {
    id: $idInput.value,
    description: $descriptionInput.value,
    priority: $priorityInput.value,
    deadline: $deadlineInput.value,
    column: $columnInput.value,
    valor: $valorInput.value, 
    observacao: $observacaoInput.value,
  };

  const index = tasklist.findIndex(task => task.id == updatedTask.id);

  if (index !== -1) {
    tasklist[index] = updatedTask;
  }  

  function deleteTask() {
  // Obtenha o ID da conta a ser excluída do campo oculto
  var taskId = document.getElementById("idInput").value;

  // Verifique se o ID não está vazio
  if (taskId !== "") {
    // Use o ID para encontrar o elemento do card correspondente e removê-lo
    var cardToRemove = document.querySelector('.cards_List [data-id="' + taskId + '"]');
    if (cardToRemove) {
      cardToRemove.remove();
    }

    // Feche o modal após excluir a conta
    closeModal(4);
  }
}


  closeModal();
  generateCards();
}

function changeColumn(task_id, column_id) {
  if (task_id && column_id) {
    tasklist = tasklist.map(task => {
      if (task.id == task_id) {
        return {
          ...task,
          column: column_id,
        };
      }
      return task;
    });
    generateCards();
  }
}



function dragstart_handler(ev) {
  ev.dataTransfer.setData("my_custom_data", ev.target.id);
  ev.dataTransfer.effectAllowed = "move";
}

function dragover_handler(ev) {
  ev.preventDefault();
  ev.dataTransfer.dropEffect = "move";
}

function drop_handler(ev) {
  ev.preventDefault();
  const task_id = ev.dataTransfer.getData("my_custom_data");
  const column_id = ev.target.closest(".column").dataset.column;
  changeColumn(task_id, column_id);
}

// Função para realizar a pesquisa
function search() {
  // Obtenha o valor do campo de pesquisa
  const searchInput = document.getElementById('searchInput');
  const searchTerm = searchInput.value;

  // Exemplo: mostrar um alerta com o termo de pesquisa
  alert(`Você está pesquisando por: ${searchTerm}`);
}
