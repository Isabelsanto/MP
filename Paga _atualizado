const $modal = document.getElementById('modal');
const $descriptionInput = document.getElementById('description');
const $priorityInput = document.getElementById('priority');
const $deadlineInput = document.getElementById('deadline');
const $columnInput = document.getElementById('column');
const $idInput = document.getElementById('idInput');
const $valorInput = document.getElementById('valor'); // Adicionei o campo "valor"

const $creationModeTitle = document.getElementById('creationModeTitle');
const $editingModeTitle = document.getElementById('editingModeTitle');

const $deleteModeBtn = document.getElementById('deleteModeBtn');

const $creationModeBtn = document.getElementById('creationModeBtn');
const $editingModeBtn = document.getElementById('editingModeBtn');

var tasklist = [];

// Função para abrir o modal em modo de criação
function openModal(data_column) {
  $modal.style.display = "flex";
  $columnInput.value = data_column;
  $valorInput.value = ""; // Limpei o campo "valor"

  $creationModeTitle.style.display = "block";
  $creationModeBtn.style.display = "block";

  $editingModeTitle.style.display = "none";
  $editingModeBtn.style.display = "none";
}

function openModalToedit(id) {
  $modal.style.display = "flex";

  $creationModeTitle.style.display = "none";
  $creationModeBtn.style.display = "none";

  $editingModeTitle.style.display = "block";
  $editingModeBtn.style.display = "block";

  const task = tasklist.find(task => task.id == id);

  $idInput.value = task.id;
  $descriptionInput.value = task.description;
  $priorityInput.value = task.priority;
  $deadlineInput.value = task.deadline;
  $columnInput.value = task.column;
  $valorInput.value = task.valor;

  // Atualizar o botão "Cadastrar" no modo de edição
  $editingModeBtn.textContent = "Salvar";

  // Mostrar o botão de exclusão apenas na tela de edição
  const deleteButton = document.querySelector('#modal button.material-icons:last-child');
  deleteButton.style.display = "block";
}

function deleteCard() {
  const taskId = $idInput.value;

  if (!taskId) {
    // Não há tarefa para excluir
    closeModal();
    return;
  }
}

// Função para fechar o modal
function closeModal() {
  $modal.style.display = "none";

  $idInput.value = "";
  $descriptionInput.value = "";
  $priorityInput.value = "";
  $deadlineInput.value = "";
  $columnInput.value = "";
  $valorInput.value = "";
}

function resetColumn() {
  document.querySelectorAll('.column .body .cards_List').forEach(column => {
    column.innerHTML = '';
  });
}

function generateCards() {
  resetColumn();

  tasklist.forEach(task => {
    const formattedDate = moment(task.deadline).format('DD/MM/YYYY');
    const columnBody = document.querySelector(`[data-column="${task.column}"] .body .cards_List`);
    const card = `
      <div 
        id="${task.id}"
        class="card" 
        ondblclick="openModalToedit(${task.id})"
        draggable="true"
        ondragstart="dragstart_handler(event)"
      >
        <div class="info">
          <b>Nome/Empresa:</b>
          <span>${task.description}</span>
        </div>
        <div class="info">
          <b>Prioridade:</b>
          <span>${task.priority}</span>
        </div>
        <div class="info">
          <b>Vencimento:</b>
          <span>${formattedDate}</span>
        </div>
        <div class="info">
          <b>Valor:</b>
          <span>${task.valor}</span>
        </div>
      </div>
    `;
    columnBody.innerHTML += card;
  });
}

// Evento para fechar o modal após o carregamento da página
window.addEventListener('load', () => {
  closeModal();
});

function createTask() {
  const newTask = {
    id: Math.floor(Math.random() * 9999999),
    description: $descriptionInput.value,
    priority: $priorityInput.value,
    deadline: $deadlineInput.value,
    column: $columnInput.value,
    valor: $valorInput.value, // Adicionei o campo "valor"
  };

  // Validação da data de vencimento
  if (!isValidDeadline(newTask.deadline)) {
    alert("A data de vencimento deve ser retroativa de até 7 dias a partir da data atual.");
    return;
  }

  tasklist.push(newTask);

  closeModal();
  generateCards();
}

function isValidDeadline(deadline) {
  const currentDate = new Date();
  const inputDate = new Date(deadline);

  // Calcula a diferença em milissegundos
  const difference = inputDate - currentDate;

  // Calcula o número de milissegundos em 7 dias
  const sevenDaysInMilliseconds =  7 * 24 * 60 * 60 * 1000;

  // A data é válida se for retroativa de até 7 dias a partir da data atual
  // ou se for uma data futura
  return difference >= -sevenDaysInMilliseconds;
}



function updateTask() {
  const updatedTask = {
    id: $idInput.value,
    description: $descriptionInput.value,
    priority: $priorityInput.value,
    deadline: $deadlineInput.value,
    column: $columnInput.value,
    valor: $valorInput.value, // Adicionei o campo "valor"
  };

  // Validação da data de vencimento
  if (!isValidDeadline(updatedTask.deadline)) {
    alert("A data de vencimento deve ser retroativa de até 7 dias a partir da data atual.");
    return;
  }

  const index = tasklist.findIndex(task => task.id == updatedTask.id);

  if (index !== -1) {
    tasklist[index] = updatedTask;
  }

  closeModal();
  generateCards();
}


function changeColumn(task_id, column_id) {
  if (task_id && column_id) {
    tasklist = tasklist.map(task => {
      if (task.id == task_id) {
        return {
          ...task,
          column: column_id,
        };
      }
      return task;
    });
    generateCards();
  }
}

function dragstart_handler(ev) {
  ev.dataTransfer.setData("my_custom_data", ev.target.id);
  ev.dataTransfer.effectAllowed = "move";
}

function dragover_handler(ev) {
  ev.preventDefault();
  ev.dataTransfer.dropEffect = "move";
}

function drop_handler(ev) {
  ev.preventDefault();
  const task_id = ev.dataTransfer.getData("my_custom_data");
  const column_id = ev.target.closest(".column").dataset.column;
  changeColumn(task_id, column_id);
}

// Função para realizar a pesquisa
function search() {
  // Obtenha o valor do campo de pesquisa
  const searchInput = document.getElementById('searchInput');
  const searchTerm = searchInput.value;

  // Exemplo: mostrar um alerta com o termo de pesquisa
  alert(`Você está pesquisando por: ${searchTerm}`);
}
